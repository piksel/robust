;
; File generated by cc65 v 2.19 - Git cce119a
;
	.fopt		compiler,"cc65 v 2.19 - Git cce119a"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_scroll
	.import		_vram_adr
	.import		_vram_write
	.import		_vram_unrle
	.export		_NT_LOGO
	.export		_b
	.export		_f
	.export		_text
	.export		_palette
	.export		_delay_frames
	.export		_set_palette_col
	.export		_main

.segment	"DATA"

_palette:
	.byte	$0F
	.byte	$13
	.byte	$03
	.byte	$30
	.byte	$0F
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$0F
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$30

.segment	"RODATA"

_NT_LOGO:
	.byte	$01
	.byte	$80
	.byte	$01
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$01
	.byte	$5C
	.byte	$20
	.byte	$01
	.byte	$0D
	.byte	$80
	.byte	$01
	.byte	$4C
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$80
	.byte	$84
	.byte	$85
	.byte	$83
	.byte	$80
	.byte	$86
	.byte	$87
	.byte	$80
	.byte	$80
	.byte	$A2
	.byte	$80
	.byte	$89
	.byte	$A2
	.byte	$A3
	.byte	$85
	.byte	$85
	.byte	$A2
	.byte	$8E
	.byte	$85
	.byte	$85
	.byte	$83
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$88
	.byte	$85
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$85
	.byte	$8B
	.byte	$89
	.byte	$8C
	.byte	$85
	.byte	$85
	.byte	$83
	.byte	$80
	.byte	$85
	.byte	$80
	.byte	$95
	.byte	$8A
	.byte	$A4
	.byte	$80
	.byte	$80
	.byte	$8B
	.byte	$9D
	.byte	$81
	.byte	$8C
	.byte	$88
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$88
	.byte	$85
	.byte	$8D
	.byte	$8E
	.byte	$88
	.byte	$85
	.byte	$8F
	.byte	$89
	.byte	$8A
	.byte	$85
	.byte	$8B
	.byte	$8E
	.byte	$8A
	.byte	$85
	.byte	$80
	.byte	$95
	.byte	$A5
	.byte	$88
	.byte	$A4
	.byte	$A2
	.byte	$80
	.byte	$8B
	.byte	$95
	.byte	$8A
	.byte	$88
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$88
	.byte	$85
	.byte	$90
	.byte	$83
	.byte	$88
	.byte	$85
	.byte	$80
	.byte	$91
	.byte	$92
	.byte	$85
	.byte	$93
	.byte	$94
	.byte	$8D
	.byte	$98
	.byte	$80
	.byte	$93
	.byte	$A5
	.byte	$88
	.byte	$80
	.byte	$89
	.byte	$92
	.byte	$8F
	.byte	$95
	.byte	$8A
	.byte	$88
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$8D
	.byte	$85
	.byte	$8B
	.byte	$95
	.byte	$8A
	.byte	$96
	.byte	$85
	.byte	$8A
	.byte	$97
	.byte	$98
	.byte	$80
	.byte	$99
	.byte	$9A
	.byte	$A6
	.byte	$85
	.byte	$AD
	.byte	$9A
	.byte	$A7
	.byte	$85
	.byte	$AD
	.byte	$A8
	.byte	$80
	.byte	$93
	.byte	$A9
	.byte	$8D
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$8D
	.byte	$9B
	.byte	$8B
	.byte	$9C
	.byte	$9D
	.byte	$88
	.byte	$9C
	.byte	$9C
	.byte	$9E
	.byte	$9F
	.byte	$85
	.byte	$A0
	.byte	$9D
	.byte	$9A
	.byte	$8B
	.byte	$01
	.byte	$02
	.byte	$88
	.byte	$9A
	.byte	$88
	.byte	$AA
	.byte	$80
	.byte	$AB
	.byte	$AC
	.byte	$8D
	.byte	$80
	.byte	$01
	.byte	$06
	.byte	$8D
	.byte	$8D
	.byte	$8B
	.byte	$8F
	.byte	$8B
	.byte	$8D
	.byte	$88
	.byte	$88
	.byte	$8F
	.byte	$9C
	.byte	$80
	.byte	$8D
	.byte	$80
	.byte	$9C
	.byte	$9E
	.byte	$8F
	.byte	$8F
	.byte	$8D
	.byte	$8B
	.byte	$8D
	.byte	$8D
	.byte	$80
	.byte	$80
	.byte	$8F
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$8D
	.byte	$8B
	.byte	$80
	.byte	$8F
	.byte	$8D
	.byte	$8D
	.byte	$88
	.byte	$80
	.byte	$8F
	.byte	$80
	.byte	$8D
	.byte	$80
	.byte	$A1
	.byte	$8F
	.byte	$01
	.byte	$02
	.byte	$80
	.byte	$8F
	.byte	$8D
	.byte	$80
	.byte	$80
	.byte	$8F
	.byte	$80
	.byte	$01
	.byte	$0A
	.byte	$8F
	.byte	$80
	.byte	$01
	.byte	$FE
	.byte	$80
	.byte	$01
	.byte	$7A
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$F0
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$0C
	.byte	$30
	.byte	$F3
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$00
	.byte	$FC
	.byte	$FF
	.byte	$FF
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$FC
	.byte	$FF
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_text:
	.byte	$4E,$6F,$20,$63,$61,$72,$74,$20,$6C,$6F,$61,$64,$65,$64,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_b:
	.res	1,$00
_f:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ delay_frames (unsigned char count)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay_frames: near

.segment	"CODE"

;
; void delay_frames(unsigned char count) {
;
	jsr     pusha
;
; for (f = 0; f <= count; f++) {
;
	lda     #$00
	sta     _f
L0006:	lda     _f
	ldy     #$00
	cmp     (sp),y
	bcc     L0005
	bne     L0003
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; for (f = 0; f <= count; f++) {
;
	inc     _f
	jmp     L0006
;
; }
;
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ set_palette_col (unsigned char b, char glow)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_palette_col: near

.segment	"CODE"

;
; void set_palette_col(unsigned char b, char glow) {
;
	jsr     pusha
;
; if (glow) {
;
	ldy     #$00
	lda     (sp),y
	beq     L0002
;
; palette[0x1] = 0x20 | b;
;
	iny
	lda     (sp),y
	ora     #$20
	sta     _palette+1
;
; palette[0x2] = 0x10 | b;
;
	lda     (sp),y
	ora     #$10
	sta     _palette+2
;
; palette[0xd] = 0x20 | b;
;
	lda     (sp),y
	ora     #$20
	sta     _palette+13
;
; palette[0xe] = 0x30 | b;
;
	lda     (sp),y
	ora     #$30
;
; } else {
;
	jmp     L0004
;
; palette[0x1] = 0x10 | b;
;
L0002:	iny
	lda     (sp),y
	ora     #$10
	sta     _palette+1
;
; palette[0x2] = 0x00 | b;
;
	lda     (sp),y
	sta     _palette+2
;
; palette[0xd] = 0x10 | b;
;
	lda     (sp),y
	ora     #$10
	sta     _palette+13
;
; palette[0xe] = 0x20 | b;
;
	lda     (sp),y
	ora     #$20
L0004:	sta     _palette+14
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(NT_LOGO);
;
	lda     #<(_NT_LOGO)
	ldx     #>(_NT_LOGO)
	jsr     _vram_unrle
;
; vram_adr(NTADR_A(9,8)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$09
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0F
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; for (b = 0x1; b <= 0x3; b++) {
;
L0035:	lda     #$01
	sta     _b
L0036:	lda     _b
	cmp     #$04
	bcs     L0037
	inc     _b
	jmp     L0036
;
; delay_frames(60);
;
L0037:	lda     #$3C
	jsr     _delay_frames
;
; for (b = 0x3; b <= 0xc; b++) {
;
	lda     #$03
	sta     _b
L0038:	lda     _b
	cmp     #$0D
	bcs     L0039
;
; set_palette_col(b, 0);
;
	jsr     pusha
	lda     #$00
	jsr     _set_palette_col
;
; delay_frames(10);
;
	lda     #$0A
	jsr     _delay_frames
;
; for (b = 0x3; b <= 0xc; b++) {
;
	inc     _b
	jmp     L0038
;
; for (b = 0x1; b <= 0x3; b++) {
;
L0039:	lda     #$01
	sta     _b
L003A:	lda     _b
	cmp     #$04
	bcs     L003B
;
; set_palette_col(b, 0);
;
	jsr     pusha
	lda     #$00
	jsr     _set_palette_col
;
; delay_frames(10);
;
	lda     #$0A
	jsr     _delay_frames
;
; for (b = 0x1; b <= 0x3; b++) {
;
	inc     _b
	jmp     L003A
;
; delay_frames(60);
;
L003B:	lda     #$3C
	jsr     _delay_frames
;
; for (b = 0; b <= 0x4; b++) {
;
	lda     #$00
	sta     _b
L003C:	lda     _b
	cmp     #$05
	bcs     L003D
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (b = 0; b <= 0x4; b++) {
;
	inc     _b
	jmp     L003C
;
; for (; b >= 1; b--) {
;
L003D:	lda     _b
	beq     L003E
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (; b >= 1; b--) {
;
	dec     _b
	jmp     L003D
;
; delay_frames(4);
;
L003E:	lda     #$04
	jsr     _delay_frames
;
; for (b = 0; b <= 0x4; b++) {
;
	lda     #$00
	sta     _b
L003F:	lda     _b
	cmp     #$05
	bcs     L0040
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (b = 0; b <= 0x4; b++) {
;
	inc     _b
	jmp     L003F
;
; for (; b >= 1; b--) {
;
L0040:	lda     _b
	beq     L0041
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (; b >= 1; b--) {
;
	dec     _b
	jmp     L0040
;
; delay_frames(30);
;
L0041:	lda     #$1E
	jsr     _delay_frames
;
; for (b = 0; b <= 0x4; b++) {
;
	lda     #$00
	sta     _b
L0042:	lda     _b
	cmp     #$05
	bcs     L0043
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (b = 0; b <= 0x4; b++) {
;
	inc     _b
	jmp     L0042
;
; for (; b >= 1; b--) {
;
L0043:	lda     _b
	beq     L0044
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (; b >= 1; b--) {
;
	dec     _b
	jmp     L0043
;
; delay_frames(4);
;
L0044:	lda     #$04
	jsr     _delay_frames
;
; for (b = 0; b <= 0x4; b++) {
;
	lda     #$00
	sta     _b
L0045:	lda     _b
	cmp     #$05
	bcs     L0046
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (b = 0; b <= 0x4; b++) {
;
	inc     _b
	jmp     L0045
;
; for (; b >= 1; b--) {
;
L0046:	lda     _b
	beq     L0047
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(0, b);
;
	jsr     push0
	lda     _b
	jsr     _scroll
;
; for (; b >= 1; b--) {
;
	dec     _b
	jmp     L0046
;
; delay_frames(60);
;
L0047:	lda     #$3C
	jsr     _delay_frames
;
; for (b = 0; b <= 4; b++) {
;
	lda     #$00
	sta     _b
L0048:	lda     _b
	cmp     #$05
	jcs     L0035
;
; set_palette_col(3, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _set_palette_col
;
; delay_frames(10);
;
	lda     #$0A
	jsr     _delay_frames
;
; set_palette_col(3, 1);
;
	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _set_palette_col
;
; delay_frames(10);
;
	lda     #$0A
	jsr     _delay_frames
;
; set_palette_col(3, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _set_palette_col
;
; for (b = 0; b <= 4; b++) {
;
	inc     _b
	jmp     L0048

.endproc

